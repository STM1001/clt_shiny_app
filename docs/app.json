[{"name":"app.R","content":"library(shiny)\r\nlibrary(bslib)\r\nlibrary(bsicons)\r\nlibrary(waiter)\r\nlibrary(plotly)\r\nlibrary(readxl)\r\nlibrary(reactable)\r\nlibrary(ggplot2)\r\n\r\n# Shiny app\r\nui <- fluidPage(\r\n  \r\n  useGarcon(),\r\n  useWaiter(),\r\n  useSteward(colors = c(\"#b51c16\", \"#e2231b\"), speed = 10),\r\n  \r\n  waiterShowOnLoad(\r\n    tags$img(\r\n      src=\"https://www.latrobe.edu.au/__data/assets/file/0010/796393/logo-white.svg\", \r\n      height=200, \r\n      id = \"LTULogo\" # set id\r\n    )\r\n  ),\r\n  \r\n  titlePanel(\"Central Limit Theorem Demonstration\"),\r\n  helpText(\"For this demonstration, the underlying data is generated from an Exponential distribution\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      helpText(\"You can change the inputs for the demonstration here:\"),\r\n      numericInput(\"pop_mean\", \"Population Mean:\", value = 1, min = -10, max = 10, step = 1),\r\n      #numericInput(\"pop_sd\", \"Population Variance:\", value = 1, min = 1, max = 10, step = 1),\r\n      sliderInput(\"sample_size\", \"Sample Size for each Trial:\", \r\n                  min = 5, max = 1000, value = 100, step = 1),\r\n      sliderInput(\"num_samples\", \"Number of Trials:\", \r\n                  min = 1, max = 10000, value = 1000, step = 1),\r\n      helpText(\"Click this button to produce results.\"),\r\n      actionButton(\"generate\", \"Generate Results\"),\r\n      helpText(\"Each time you adjust one or more of the above settings, please click the `Generate Results` button again to show the new results.\"),\r\n    ),\r\n    mainPanel(\r\n      helpText(\"This plot displays a histogram of the sample values randomly generated for one trial\"),\r\n      div(plotOutput(\"hist_first_sample\"), style = \"margin-bottom: 30px;\"),\r\n     # div(plotOutput(\"hist_all_samples\"), style = \"margin-bottom: 30px;\"),\r\n     #helpText(\"This plot displays a histogram of the sample means from each trial\"),\r\n     helpText(textOutput(\"message\")),\r\n      div(plotOutput(\"hist_sample_means\"))\r\n\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output) {\r\n  \r\n  # Load screen\r\n  \r\n  Garcon$new(\"LTULogo\",  opacity = 0, filter = \"blur\")\r\n  Sys.sleep(0.75)\r\n  waiter_show(html = spin_fading_circles()) \r\n  \r\n  Sys.sleep(0.25)\r\n  waiter_hide()\r\n  \r\n  samples <- eventReactive(input$generate, {\r\n    replicate(input$num_samples, rexp(input$sample_size, 1/input$pop_mean))\r\n  })\r\n\r\n  output$hist_first_sample <- renderPlot({\r\n    first_sample <- samples()[, 1]\r\n    mean_first_sample <- mean(first_sample)\r\n    ggplot(data.frame(value = first_sample), aes(x = value)) +\r\n      geom_histogram(bins = 30, color = \"black\", fill = \"turquoise\", alpha = 0.7) +\r\n      ggtitle(\"Histogram of Sampled Values from First Trial\") +\r\n      xlab(\"Value\") + ylab(\"Frequency\") +\r\n      # geom_vline(xintercept = mean_first_sample, color = \"red\", linetype = \"dashed\", size = 1) +\r\n      theme(axis.text = element_text(size = 14, face = \"bold\"),\r\n            axis.title = element_text(size = 14, face = \"bold\"),\r\n            plot.title = element_text(size = 16, face = \"bold\"))+\r\n      scale_x_continuous(limits = c(min(samples()[, 1]) - 0.5, max(samples()[, 1]) + 0.5))\r\n  })\r\n  \r\n  output$message <- renderText({paste(\"This plot displays a histogram of the sample means for the\", input$num_samples, \"trials\")})\r\n  output$hist_all_samples <- renderPlot({\r\n    sample_values <- as.vector(samples())\r\n    overall_mean <- mean(sample_values)\r\n    ggplot(data.frame(value = sample_values), aes(x = value)) +\r\n      geom_histogram(bins = 30, color = \"black\", fill = \"turquoise\", alpha = 0.7) +\r\n      # geom_vline(xintercept = overall_mean, color = \"red\", linetype = \"dashed\", size = 1) +\r\n      ggtitle(\"Histogram of Sampled Values from all Trials\") +\r\n      xlab(\"Value\") + ylab(\"Frequency\") + \r\n      theme(axis.text = element_text(size = 14, face = \"bold\"),\r\n            axis.title = element_text(size = 14, face = \"bold\"),\r\n            plot.title = element_text(size = 16, face = \"bold\"))\r\n  })\r\n  \r\n  output$hist_sample_means <- renderPlot({\r\n    sample_means <- colMeans(samples())\r\n    mean_of_means <- mean(sample_means)\r\n    ggplot(data.frame(mean = sample_means), aes(x = mean)) +\r\n      geom_histogram(aes(y = ..density..), bins = 200, color = \"black\", fill = \"orangered\", alpha = 0.7) +\r\n     # geom_vline(xintercept = mean_of_means, color = \"red\", linetype = \"dashed\", size = 1) +\r\n      stat_function(fun = dnorm, args = list(mean = input$pop_mean, sd = input$pop_mean / sqrt(input$sample_size)), \r\n                    color = \"blue\", size = 1, n = 10000) +\r\n      ggtitle(\"Histogram of Sample Means from each Trial, \\n with CLT Normal Density Curve overlaid\") +\r\n      xlab(\"Sample Mean\") + ylab(\"Density\") + \r\n      theme(axis.text = element_text(size = 14, face = \"bold\"),\r\n            axis.title = element_text(size = 14, face = \"bold\"),\r\n            plot.title = element_text(size = 16, face = \"bold\"))+\r\n      scale_x_continuous(limits = c(min(samples()[, 1]) - 0.5, max(samples()[, 1]) + 0.5))\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
